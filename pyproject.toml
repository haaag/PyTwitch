[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "menu-twitch"
description = "Simple menu tool for launching Twitch streams."
version = "0.1.0"
readme = "README.md"
requires-python = ">=3.8"
keywords = ["dmenu", "rofi", "twitch", "cli", "utility",]
dependencies = [ "httpx>=0.23.1" ]

[project.scripts]
twitch-menu = "twitch.__main__:main"

[tool.hatch.version]
path = "src/twitch/__init__.py"

[project.optional-dependencies]
test = [
  "pytest >=7.1.3,<8.0.0",
  "coverage[toml] >= 6.5.0,< 8.0",
]
dev = [
  "ruff ==0.0.257",
  "mypy ==1.0.1",
  "black == 23.1.0",
]

[tool.black]
line-length = 120

[tool.mypy]
show_error_codes = true
show_error_context = true
show_column_numbers = true
ignore_missing_imports = true

[tool.pylint]
max-line-length = 120
disable = [
    "C0103", # (invalid-name)
    "C0114", # (missing-module-docstring)
    "C0115", # (missing-class-docstring)
    "C0116", # (missing-function-docstring)
    "E0401", # (import-error)
    "R0903", # (too-few-public-methods)
    "R0913", # (too-many-arguments)
    "W0105", # (pointless-string-statement)
    "R0902", # (too-many-instance-attributes)
    "W0511", # (fixme)
]

[tool.ruff]
line-length = 120
task-tags = ["HACK", "FIX", "BUG"]
show-source = true
show-fixes = true
target-version = "py37"
exclude = [
    ".venv",
    ".mypy_cache",
    ".pytest_cache",
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
extend-select = [
    "B",    # (flake8-bugbear)
    "BLE",  # (flake8-blind-except)
    "C4",   # (flake8-comprehensions)
    "ERA",  # (eradicate)
    "I",    # (isort)
    "ICN",  # (flake8-import-conventions)
    "INP",  # (flake8-no-pep420)
    "ISC",  # (flake8-implicit-str-concat)
    "N",    # (pep8-naming)
    "NPY",  # (numpy-specific-rules)
    "PGH",  # (pygrep-hooks)
    "PIE",  # (flake8-pie)
    "PTH",  # (flake8-use-pathlib)
    "Q",    # (flake8-quotes)
    "RET",  # (flake8-return)
    "RSE",  # (flake8-raise)
    "RUF",  # (ruff-specific-rules)
    "S",    # (flake8-bandit)
    "SIM",  # (flake8-simplify)
    "T20",  # (flake8-print)
    "TCH",  # (flake8-type-checking)
    "TID",  # (flake8-tidy-imports)
    "YTT",  # (flake8-2020)
]

[tool.ruff.isort]
force-single-line = true
order-by-type = true
required-imports = ["from __future__ import annotations"]

[tool.pytest.ini_options]
pythonpath = "src"
testpaths = ["tests"]

[tool.hatch.envs.default]
dependencies = [
  "pytest",
  "pytest-cov",
]
[tool.hatch.envs.default.scripts]
cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=pymarks --cov=tests {args} && coverage html"
cov-html = "coverage html"
no-cov = "cov --no-cov {args}"

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
